wastewater <- read_csv(here("data", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name) %>%
select(date, plant_name, load_per_capita)
str(wastewater)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name) %>%
select(date, plant_name, load_per_capita)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name) #%>%
View(wastewater)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita)
View(wastewater)
ggplot(wastewater, aes(x=date, y=load_per_capita)) + geom_smooth()
ggplot(cases, aes(x=date, y=cases)) +
geom_bar(stat="identity") +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
ggplot(wastewater, aes(x=date, y=load_per_capita)) + geom_smooth()
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita)
View(wastewater)
# 7 day rolling average of all cases (confirmed and probable)
cases <- read_csv(here("data", "cases-by-day.csv")) %>%
clean_names() %>%
select(date_of_interest, all_case_count_7day_avg) %>%
rename(date = date_of_interest, cases = all_case_count_7day_avg) %>%
mutate(date = as.Date(date, format = "%m/%d/%Y")) %>%
select(date, cases) %>%
filter(date >= 2020-08-31)
View(cases)
# 7 day rolling average of all cases (confirmed and probable)
cases <- read_csv(here("data", "cases-by-day.csv")) %>%
clean_names() %>%
select(date_of_interest, all_case_count_7day_avg) %>%
rename(date = date_of_interest, cases = all_case_count_7day_avg) %>%
mutate(date = as.Date(date, format = "%m/%d/%Y")) %>%
select(date, cases) %>%
filter(date >= 2020-08-31)
# 7 day rolling average of all cases (confirmed and probable)
cases <- read_csv(here("data", "cases-by-day.csv")) %>%
clean_names() %>%
select(date_of_interest, all_case_count_7day_avg) %>%
rename(date = date_of_interest, cases = all_case_count_7day_avg) %>%
mutate(date = as.Date(date, format = "%m/%d/%Y")) %>%
select(date, cases) %>%
filter(date >= "2020-08-31")
ggplot(cases, aes(x=date, y=cases)) +
geom_bar(stat="identity") +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(rio)
# 7 day rolling average of all cases (confirmed and probable)
cases <- read_csv(here("data", "cases-by-day.csv")) %>%
clean_names() %>%
select(date_of_interest, all_case_count_7day_avg) %>%
rename(date = date_of_interest, cases = all_case_count_7day_avg) %>%
mutate(date = as.Date(date, format = "%m/%d/%Y")) %>%
select(date, cases) %>%
filter(date >= "2020-08-31")
# 7 day rolling average of all cases (confirmed and probable)
cases <- read_csv(here("data", "raw", "cases-by-day.csv")) %>%
clean_names() %>%
select(date_of_interest, all_case_count_7day_avg) %>%
rename(date = date_of_interest, cases = all_case_count_7day_avg) %>%
mutate(date = as.Date(date, format = "%m/%d/%Y")) %>%
select(date, cases) %>%
filter(date >= "2020-08-31")
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita)
View(wastewater)
export(wastewater, "wastewater.csv")
export(cases, "cases.csv")
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita) %>%
group_by(date) %>%
summmarize(cases = sum(cases))
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(rio)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita) %>%
group_by(date) %>%
summmarize(cases = sum(cases))
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita) %>%
group_by(date) %>%
summarize(cases = sum(cases))
str(wastewater)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita) %>%
group_by(date) %>%
summarize(cases = sum(cases))
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita) %>%
group_by(date) %>%
summarize(cases = sum(load_per_capita))
View(wastewater)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita)
wastewater_totals <-  wastewater %>%
group_by(date) %>%
summarize(cases = sum(load_per_capita))
View(wastewater_totals)
na <- sapply(wastewater, anyNA)
na
missing_values <-
wastewater %>%
filter(is.na(load_per_capita))
View(missing_values)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita)
wastewater_totals <-  wastewater %>%
replace_na(load_per_capita, 0)
wastewater_totals <-  wastewater %>%
replace_na(0)
wastewater_totals <-  wastewater %>%
replace_na(load_per_capita, 0)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita)
wastewater_totals <-  wastewater %>%
replace_na(replace = 0)
wastewater[is.na(wastewater)] <- 0
View(wastewater)
wastewater_totals <-  wastewater %>%
group_by(date) %>%
summarize(cases = sum(load_per_capita))
View(wastewater)
View(wastewater_totals)
export(wastewater_totals, "wastewater.csv")
wastewater_totals <-  wastewater %>%
group_by(date) %>%
summarize(load_per_capita = sum(load_per_capita))
wastewater_totals <-  wastewater %>%
group_by(date) %>%
summarize(load_per_capita = sum(load_per_capita))
export(wastewater_totals, "wastewater.csv")
export(wastewater_totals,"data/processed/wastewater.csv")
# 7 day rolling average of all cases (confirmed and probable)
cases <- read_csv(here("data", "raw", "cases-by-day.csv")) %>%
clean_names() %>%
select(date_of_interest, all_case_count_7day_avg) %>%
rename(date = date_of_interest, cases = all_case_count_7day_avg) %>%
mutate(date = as.Date(date, format = "%m/%d/%Y")) %>%
select(date, cases) %>%
filter(date >= "2022-01-01")
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load_per_capita = per_capita_sars_co_v_2_load_n1_copies_per_day_per_population) %>%
select(date, plant_name, load_per_capita)
# check in with Betsy if we should consider missing values are null or zero
missing_values <-
wastewater %>%
filter(is.na(load_per_capita))
# turn NAs into zeros and group by date for export to datawrapper
wastewater[is.na(wastewater)] <- 0
wastewater_totals <-  wastewater %>%
group_by(date) %>%
summarize(load_per_capita = sum(load_per_capita)) %>%
filter(date >= "2022-01-01")
export(wastewater_2022,"data/processed/wastewater_2022.csv")
wastewater_2022 <-  wastewater %>%
group_by(date) %>%
summarize(load_per_capita = sum(load_per_capita)) %>%
filter(date >= "2022-01-01")
export(wastewater_2022,"data/processed/wastewater_2022.csv")
export(cases, "data/processed/cases_2022.csv")
View(missing_values)
View(wastewater_totals)
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(rio)
# load plant locations scraped from CDC website
plant_locations <- read_csv(here("data", "raw", "nwss_lat_longs.csv")) %>%
clean_names()
View(plant_locations)
# load plant locations scraped from CDC website
plant_locations <- read_csv(here("data", "raw", "nwss_lat_longs.csv")) %>%
clean_names() %>%
filter(name == reporting_jurisdiction)
# load plant locations scraped from CDC website
plant_locations <- read_csv(here("data", "raw", "nwss_lat_longs.csv")) %>%
clean_names() %>%
filter(reporting_jurisdiction == "New York City")
# load plant locations scraped from CDC website
plant_locations <- read_csv(here("data", "raw", "nwss_lat_longs.csv")) %>%
clean_names() %>%
filter(reporting_jurisdiction == "New York City") %>%
select(wwtp_id, county_name, county_fips, latitude, longitude)
# load plant locations scraped from CDC website
plant_locations <- read_csv(here("data", "raw", "nwss_lat_longs.csv")) %>%
clean_names() %>%
filter(reporting_jurisdiction == "New York City") %>%
select(wwtp_id, county_names, county_fips, latitude, longitude)
View(plant_locations)
export(locations, "date/processed/locations.csv")
export(plant_locations, "date/processed/locations.csv")
export(plant_locations, "data/processed/locations.csv")
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(rio)
# load plant locations scraped from CDC website
plant_locations <- read_csv(here("data", "raw", "nwss_lat_longs.csv")) %>%
clean_names() %>%
filter(reporting_jurisdiction == "New York City") %>%
select(wwtp_id, county_names, county_fips, latitude, longitude)
View(plant_locations)
library(mapview)
mapview(plant_locations, xcol = "longitude", ycol = "latitude", crs = 4269, grid = FALSE)
View(plant_locations)
chicago <- st_transform(st_as_sf(plant_locations))
library(sf)
chicago <- st_transform(st_as_sf(plant_locations))
plants.sf <-
st_as_sf(plant_locations, coords = c("longitude", "latitude"), crs = "EPSG:4326") %>%
st_transform(coords, crs = "EPSG:26916")
View(plants.sf)
plot(plants.sf)
ggplot() + geom_sf(plants.sf)
ggplot() + geom_sf(plants.sf, mapping = aes (col = wwtp_id))
View(plant_locations)
plants.sf <-
st_as_sf(plant_locations, coords = c("longitude", "latitude"), crs = "EPSG:4326") %>%
st_transform(coords, crs = "EPSG:4326")
View(plants.sf)
nyc <- read_sf(here("data", "raw", "nybb.csv"))
nyc
View(nyc)
ggplot + geom_sf(data = nyc)
crs = st_crs("EPSG:4326")
chicago <- st_transform(st_as_sf(city_boundaries), crs)
crs = st_crs("EPSG:4326")
nyc <- st_transform(st_as_sf(nyc_shape_file), crs)
nyc_shape_file <- read_sf(here("data", "raw", "nybb.csv"))
crs = st_crs("EPSG:4326")
nyc <- st_transform(st_as_sf(nyc_shape_file), crs)
nyc_shape_file <- st_read(here("data", "raw", "nybb.csv"))
nyc_shape_file <- st_read(here("data", "raw", "geo_export_656d659c-5cac-4148-b193-f4a1fcce348c"))
crs = st_crs("EPSG:4326")
nyc <- st_transform(st_as_sf(nyc_shape_file), crs)
ggplot + geom_sf(data = nyc)
ggplot + geom_sf(nyc)
View(nyc_shape_file)
ggplot + geom_sf(nyc  mapping = aes (col = boro_name))
ggplot + geom_sf(nyc, mapping = aes (col = boro_name))
plot(nyc)
ggplot() + geom_sf(nyc, aes(fill = AREA))
ggplot(nyc) + geom_sf(aes(fill = AREA))
ggplot(nyc) + geom_sf(aes(fill = boro_name))
plants.sf <-
st_as_sf(plant_locations, coords = c("longitude", "latitude"), crs = "EPSG:4326") %>%
st_transform(coords, crs = "EPSG:4326")
View(plants.sf)
ggplot() + geom_sf(data = nyc, aes(fill = boro_name))
ggplot() + geom_sf(data = nyc, aes(fill = boro_name)) + geom_sf(data = plants.sf)
plants.sf <-
st_as_sf(plant_locations, coords = c("longitude", "latitude"), crs = "EPSG:2955") %>%
st_transform(coords, crs = "EPSG:4326")
ggplot() + geom_sf(data = nyc, aes(fill = boro_name)) + geom_sf(data = plants.sf)
plants.sf <-
st_as_sf(plant_locations, coords = c("longitude", "latitude"), crs = "EPSG:3857") %>%
st_transform(coords, crs = "EPSG:4326")
ggplot() + geom_sf(data = nyc, aes(fill = boro_name)) + geom_sf(data = plants.sf)
plants.sf <-
st_as_sf(plant_locations, coords = c("longitude", "latitude"), crs = "EPSG:2163") %>%
st_transform(coords, crs = "EPSG:4326")
ggplot() + geom_sf(data = nyc, aes(fill = boro_name)) + geom_sf(data = plants.sf)
plants.sf <-
st_as_sf(plant_locations, coords = c("longitude", "latitude"), crs = "EPSG:4269") %>%
st_transform(coords, crs = "EPSG:4326")
ggplot() + geom_sf(data = nyc, aes(fill = boro_name)) + geom_sf(data = plants.sf)
plants.sf <-
st_as_sf(plant_locations, coords = c("longitude", "latitude"), crs = "EPSG:4267") %>%
st_transform(coords, crs = "EPSG:4326")
ggplot() + geom_sf(data = nyc, aes(fill = boro_name)) + geom_sf(data = plants.sf)
plants.sf <-
st_as_sf(plant_locations, coords = c("longitude", "latitude"), crs = "EPSG:32610") %>%
st_transform(coords, crs = "EPSG:4326")
ggplot() + geom_sf(data = nyc, aes(fill = boro_name)) + geom_sf(data = plants.sf)
plants.sf <-
st_as_sf(plant_locations, coords = c("longitude", "latitude"), crs = "EPSG:3857") %>%
st_transform(coords, crs = "EPSG:4326")
ggplot() + geom_sf(data = nyc, aes(fill = boro_name)) + geom_sf(data = plants.sf)
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(rio)
library(mapview)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y"))
View(wastewater)
# check in with Betsy if we should consider missing values are null or zero
missing_values <-
wastewater %>%
filter(is.na(load_per_capita))
str(wastewater)
# check in with Betsy if we should consider missing values are null or zero
missing_values <-
wastewater %>%
filter(is.na(concentration_sars_co_v_2_gene_target_n1_copies_l))
View(missing_values)
View(missing_values)
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(rio)
library(mapview)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y"))
View(wastewater)
str(wastewater)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load = concentration_sars_co_v_2_gene_target_n1_copies_l, pop = population_served_estimated) %>%
select(date, plant_name, pop, annotation, load)
View(wastewater)
View(wastewater)
# use sample date and normalized per capita as CDC does
wastewater <- read_csv(here("data", "raw", "SARS-CoV-2_concentrations_measured_in_NYC_Wastewater.csv")) %>%
clean_names() %>%
mutate(date = as.Date(sample_date, format = "%m/%d/%Y")) %>%
rename(plant_name = wrrf_name, load = concentration_sars_co_v_2_gene_target_n1_copies_l, pop = population_served_estimated) %>%
select(date, plant_name, pop, annotation, load)
View(wastewater)
# use 15 (midway between 0 and lowest value) for below LOQ, and input zero otherwise
wastewater_clean <- wastewater %>%
mutate(load == 0)
View(wastewater_clean)
# use 15 (midway between 0 and lowest value) for below LOQ, and input zero otherwise
wastewater_clean <- wastewater %>%
mutate(load = 0)
View(wastewater_clean)
# use 15 (midway between 0 and lowest value) for below LOQ, and input zero otherwise
wastewater_clean <- wastewater %>%
mutate(load = if_else(annotation == "Concentration below Method Limit of Quantification (above Method Limit of Detection)", 15))
# use 15 (midway between 0 and lowest value) for below LOQ, and input zero otherwise
wastewater_clean <- wastewater %>%
mutate(load = if_else(annotation == "Concentration below Method Limit of Quantification (above Method Limit of Detection)", 15, load))
View(wastewater_clean)
annotations <- wastewater %>%
group_by(annotation)
annotations <- wastewater %>%
distinct(annotation)
View(annotations)
wastewater_clean <- wastewater %>%
mutate(load = if_else(annotation == "Concentration below Method Limit of Detection", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal in 1 out of 3 RT-qPCR wells, result is obtained by averaging signal from the two remaining RT-qPCR wells", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(annotation == "Concentration below Method Limit of DetectionNo signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15, load)))))
View(wastewater_clean)
wastewater_clean <- wastewater %>%
mutate(load = if_else(annotation == "Concentration below Method Limit of Detection", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal in 1 out of 3 RT-qPCR wells, result is obtained by averaging signal from the two remaining RT-qPCR wells", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(annotation == "Concentration below Method Limit of DetectionNo signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(is.na(concentration_sars_co_v_2_gene_target_n1_copies_l), 0, load))))))
wastewater_clean <- wastewater %>%
mutate(load = if_else(annotation == "Concentration below Method Limit of Detection", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal in 1 out of 3 RT-qPCR wells, result is obtained by averaging signal from the two remaining RT-qPCR wells", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(annotation == "Concentration below Method Limit of DetectionNo signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(is.na(load), 0, load))))))
View(wastewater_clean)
View(wastewater_clean)
wastewater_clean_na <- wastewater_clean %>%
filter(is.na(load))
View(wastewater_clean_na)
wastewater_clean <- wastewater %>%
mutate(load = if_else(annotation == "Concentration below Method Limit of Detection", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal in 1 out of 3 RT-qPCR wells, result is obtained by averaging signal from the two remaining RT-qPCR wells", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(annotation == "Concentration below Method Limit of DetectionNo signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15, load)))))
View(wastewater_clean)
wastewater_clean <- wastewater %>%
mutate(load = if_else(annotation == "Concentration below Method Limit of Detection", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal in 1 out of 3 RT-qPCR wells, result is obtained by averaging signal from the two remaining RT-qPCR wells", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(annotation == "Concentration below Method Limit of DetectionNo signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(is.na(load), 0,
if_else(is.na(load), load, load)))))))
View(wastewater_clean)
wastewater_clean <- wastewater %>%
mutate(load = if_else(annotation == "Concentration below Method Limit of Detection", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal in 1 out of 3 RT-qPCR wells, result is obtained by averaging signal from the two remaining RT-qPCR wells", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(annotation == "Concentration below Method Limit of DetectionNo signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(is.na(load), 0,
if_else(is.na(annotation), load, load)))))))
View(wastewater_clean)
wastewater_clean <- wastewater %>%
mutate(load = if_else(is.na(annotation), load,
if_else(annotation == "Concentration below Method Limit of Detection", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal in 1 out of 3 RT-qPCR wells, result is obtained by averaging signal from the two remaining RT-qPCR wells", 15,
if_else(annotation == "Concentration below Method Limit of Detection - No signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(annotation == "Concentration below Method Limit of DetectionNo signal is 2 out of 3 RT-qPCR wells, result in obtained by averaging signal from the remaining RT-qPCR well", 15,
if_else(is.na(load), 0, load)))))))
View(wastewater_clean)
wastewater_clean_na <- wastewater_clean %>%
filter(is.na(load))
wastewater_daily_avg <-
wastewater_clean %>%
group_by(date) %>%
summarize(total_pop = sum(pop), total_load(sum(load)))
wastewater_daily_avg <-
wastewater_clean %>%
group_by(date) %>%
summarize(total_pop = sum(pop), total_load = sum(load))
View(wastewater_daily_avg)
wastewater_daily_avg <-
wastewater_clean %>%
group_by(date) %>%
summarize(total_pop = sum(pop), total_load = sum(load)) %>%
mutate(weighted_avg = total_load/total_pop)
View(wastewater_daily_avg)
export(wastewater_daily_avg,"data/processed/wasterwater_daily_avg.csv")
View(wastewater_clean)
# Create a df with just 2022
wastewater_daily_avg <-
wastewater_clean %>%
filter(date >= "2022-01-01") %>%
group_by(date) %>%
summarize(total_pop = sum(pop), total_load = sum(load)) %>%
mutate(weighted_avg = total_load/total_pop)
# Now with the clean data, we'll sum total load for that day and divide by total population covered by the plants
wastewater_daily_avg <-
wastewater_clean %>%
group_by(date) %>%
summarize(total_pop = sum(pop), total_load = sum(load)) %>%
mutate(weighted_avg = total_load/total_pop)
# Create a df with just 2022
wastewater_daily_avg_2022 <-
wastewater_clean %>%
filter(date >= "2022-01-01") %>%
group_by(date) %>%
summarize(total_pop = sum(pop), total_load = sum(load)) %>%
mutate(weighted_avg = total_load/total_pop)
View(wastewater_daily_avg_2022)
export(wastewater_daily_avg_2022,"data/processed/wasterwater_daily_avg_2022.csv")
library(tidyverse)
source("C:/Users/newsd/home/code/nyc_wastewater/munging.R", echo=TRUE)
